ID,Type,Context,Module,Subject,Description,Decision,Rationale,Timestamp
"mem-001","Decision","System","All","Query Interface Standardization","Các hàm query trong các crate nghiệp vụ (todo, architecture, memories) có signature không đồng nhất.","Tất cả các hàm `query` public trong các crate nghiệp vụ phải được tái cấu trúc để chấp nhận một tham số duy nhất: `repository::Query<Vec<u8>>`. Hàm `shared::filter` bị loại bỏ.","Tăng tính nhất quán và thanh lịch của kiến trúc. Giảm sự ghép nối giữa các crate. Tận dụng tối đa sự trừu tượng của `repository::Storage`. Đơn giản hóa việc sử dụng và bảo trì API.",2024-06-09T00:00:00Z
"mem-002","Decision","System","All","Single-Word Identifier Enforcement","Phát hiện nhiều định danh vi phạm quy tắc đơn từ trong code test, benchmark, và example.","Tái cấu trúc tất cả các định danh vi phạm (ví dụ: BenchStore -> Bench, temp_dir -> temp) để tuân thủ quy tắc đơn từ.","Duy trì tính nhất quán và kỷ luật của triết lý dự án. Tạo ra một codebase có phong cách độc đáo và rõ ràng theo quy ước đã định.",2024-06-09T00:00:00Z
"mem-003","Refactor","architecture","add","Simplifying `add` function logic","Hàm `add` trong `architecture` có logic upsert phức tạp.","Loại bỏ logic upsert khỏi hàm `add`. `add` chỉ chịu trách nhiệm thêm mới. Cập nhật được xử lý bởi hàm `change`.","Tuân thủ Nguyên lý Đơn trách nhiệm (SRP). Giảm độ phức tạp, tăng tính dễ đọc và dễ bảo trì.",2024-06-09T00:00:00Z
"mem-004","Refactor","memories","add","Timestamp generation","Hàm `add` trong `memories` yêu cầu người gọi truyền timestamp.","Hàm `add` sẽ tự động tạo timestamp bằng `repository::now()`.","Tăng tính nhất quán với các hàm `add` khác. Giảm gánh nặng cho người gọi API. Đảm bảo timestamp luôn hợp lệ.",2024-06-09T00:00:00Z
"mem-005","Decision","System","All","Hoàn thiện refactor, test, benchmark, enum, lint","Toàn bộ hệ thống đã hoàn thiện refactor, test, benchmark, enum, truyền kiểu, truy vấn, sạch lint, sạch warning, không còn nợ kỹ thuật.","Đồng bộ hóa mọi module, test, benchmark, ví dụ, enum, truyền kiểu, truy vấn, kiểm thử, chuẩn hóa tuyệt đối.","Sẵn sàng mở rộng, không còn nợ kỹ thuật, codebase đạt trạng thái thanh lịch, rõ ràng, dễ bảo trì.",2024-06-09T00:00:00Z
"mem-006","Decision","System","memories","Refactor 'memories' index for type safety and performance","The indexing strategy for memories relied on the first byte of a String 'type', causing collision/correctness risks and lacking type safety.","Refactor the 'memories' crate to use a dedicated 'Kind' enum for the record type. Implement conversions from the enum to a collision-free u8 for indexing. Update all related logic, including the index key structure to '[type_byte][rev_time][id]'.","This change eliminates data correctness bugs from key collisions. It introduces type safety, making the system more robust and easier to maintain. It aligns the architecture of 'memories' with the proven, high-performance design of the 'task' crate, reducing architectural debt.",2024-06-09T00:00:00Z